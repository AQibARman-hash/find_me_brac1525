# Generated by Django 5.2.5 on 2025-08-31 08:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('pillar_zone', models.CharField(choices=[('A', 'Zone A'), ('B', 'Zone B'), ('C', 'Zone C'), ('FS', 'Free Space')], max_length=2)),
                ('pillar_number', models.IntegerField(blank=True, null=True)),
                ('location_name', models.CharField(max_length=100)),
                ('free_space_available', models.BooleanField(default=True)),
                ('wifi_available', models.BooleanField(default=True)),
                ('seating_capacity', models.IntegerField(default=0)),
                ('power_outlets', models.IntegerField(default=0)),
                ('location_type', models.CharField(choices=[('pillar', 'Pillar'), ('study_area', 'Study Area'), ('common_area', 'Common Area')], max_length=15)),
                ('is_active', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('active_users_count', models.IntegerField(default=0)),
                ('current_crowd_level', models.CharField(choices=[('light', 'Light'), ('moderate', 'Moderate'), ('heavy', 'Heavy')], default='light', max_length=10)),
                ('wifi_status', models.BooleanField(default=True)),
                ('available_seats', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('study_preferences', models.JSONField(blank=True, default=dict)),
                ('notification_settings', models.JSONField(blank=True, default=dict)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='main_user_set', related_query_name='main_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='main_user_set', related_query_name='main_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_id', models.AutoField(primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('study_group', 'Study Group'), ('social', 'Social'), ('academic', 'Academic'), ('sports', 'Sports')], max_length=15)),
                ('event_title', models.CharField(max_length=200)),
                ('event_description', models.TextField(max_length=1000)),
                ('event_start', models.DateTimeField()),
                ('event_end', models.DateTimeField()),
                ('max_participants', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('current_participants', models.IntegerField(default=1)),
                ('participant_user_ids', models.JSONField(default=list)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('full', 'Full')], default='active', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='main.location')),
            ],
            options={
                'ordering': ['event_start'],
            },
        ),
        migrations.CreateModel(
            name='LocationShare',
            fields=[
                ('share_id', models.AutoField(primary_key=True, serialize=False)),
                ('shared_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('visibility', models.CharField(choices=[('all_friends', 'All Friends'), ('specific_friends', 'Specific Friends'), ('public', 'Public')], default='all_friends', max_length=20)),
                ('status_message', models.CharField(choices=[('studying', 'Studying'), ('available', 'Available'), ('busy', 'Busy')], default='studying', max_length=20)),
                ('share_type', models.CharField(choices=[('check_in', 'Check In'), ('help_request', 'Help Request'), ('study_invite', 'Study Invite')], default='check_in', max_length=15)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_shares', to='main.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_shares', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-shared_at'],
            },
        ),
        migrations.CreateModel(
            name='LocationShareTarget',
            fields=[
                ('target_id', models.AutoField(primary_key=True, serialize=False)),
                ('notification_sent', models.BooleanField(default=False)),
                ('notified_at', models.DateTimeField(blank=True, null=True)),
                ('is_seen', models.BooleanField(default=False)),
                ('share', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='main.locationshare')),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_share_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Memory',
            fields=[
                ('memory_id', models.AutoField(primary_key=True, serialize=False)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('memory_title', models.CharField(max_length=200)),
                ('description', models.TextField(max_length=1000)),
                ('media_url', models.URLField(blank=True, null=True)),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('none', 'No Media')], default='none', max_length=10)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('friends', 'Friends Only'), ('private', 'Private')], default='friends', max_length=10)),
                ('is_archived', models.BooleanField(default=False)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('year_created', models.IntegerField()),
                ('likes_count', models.IntegerField(default=0)),
                ('liked_by_user_ids', models.JSONField(default=list)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memories', to='main.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('friendship_id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('blocked', 'Blocked')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_initiated', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user1', 'user2')},
            },
        ),
        migrations.CreateModel(
            name='LocationReview',
            fields=[
                ('review_id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True, max_length=500)),
                ('review_category', models.CharField(choices=[('study_space', 'Study Space'), ('wifi_quality', 'WiFi Quality'), ('cleanliness', 'Cleanliness'), ('noise_level', 'Noise Level'), ('general', 'General')], default='general', max_length=15)),
                ('crowd_level', models.CharField(choices=[('light', 'Light'), ('moderate', 'Moderate'), ('heavy', 'Heavy')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('helpfulness_score', models.IntegerField(default=0)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='main.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'location')},
            },
        ),
    ]
